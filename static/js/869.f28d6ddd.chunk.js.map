{"version":3,"file":"static/js/869.f28d6ddd.chunk.js","mappings":"4TACaA,EAAU,mCCEvBC,IAAAA,SAAAA,QDH4B,gCCKrB,IAAMC,EAAW,mCAAG,4FACb,sBACNC,EAAS,CACbC,QAASJ,GAHc,SAMDC,GAAAA,CALZ,sBAKuB,CAAEE,OAAAA,IANZ,UAQC,OAAb,QAFPE,EANmB,cAQZ,IAATA,OAAA,EAAAA,EAAWC,QARU,sBAQY,IAAIC,MARhB,gCAUlBF,EAAUG,KAAKC,SAVG,2CAAH,qDAaXC,EAAS,mCAAG,WAAMC,GAAN,+EACX,gBACNR,EAAS,CACbC,QAASJ,EACTY,MAAOD,GAJc,SAOCV,GAAAA,CANZ,gBAMuB,CAAEE,OAAAA,IAPd,UASG,OAAb,QAFPE,EAPiB,cASV,IAATA,OAAA,EAAAA,EAAWC,QATQ,sBASc,IAAIC,MATlB,gCAWhBF,EAAUG,KAAKC,SAXC,2CAAH,sDAcTI,EAAQ,mCAAG,WAAMC,GAAN,kFAChBC,EADgB,iBACAD,GAChBX,EAAS,CACbC,QAASJ,GAHW,SAMEC,GAAAA,CAAMc,EAAK,CAAEZ,OAAAA,IANf,UAQI,OAAb,QAFPE,EANgB,cAQT,IAATA,OAAA,EAAAA,EAAWC,QARO,sBAQe,IAAIC,MARnB,gCAUfF,EAAUG,MAVK,2CAAH,sDAaRQ,EAAO,mCAAG,WAAMF,GAAN,kFACfC,EADe,iBACCD,EADD,YAEfX,EAAS,CACbC,QAASJ,GAHU,SAMGC,GAAAA,CAAMc,EAAK,CAAEZ,OAAAA,IANhB,UAQK,OAAb,QAFPE,EANe,cAQR,IAATA,OAAA,EAAAA,EAAWC,QARM,sBAQgB,IAAIC,MARpB,gCAUdF,EAAUG,KAAKS,MAVD,2CAAH,sDAaPC,EAAU,mCAAG,WAAMJ,GAAN,kFAClBC,EADkB,iBACFD,EADE,YAElBX,EAAS,CACbC,QAASJ,GAHa,SAMAC,GAAAA,CAAMc,EAAK,CAAEZ,OAAAA,IANb,UAQE,OAAb,QAFPE,EANkB,cAQX,IAATA,OAAA,EAAAA,EAAWC,QARS,sBAQa,IAAIC,MARjB,gCAUjBF,EAAUG,KAAKC,SAVE,2CAAH,uD,wICxDVU,EAAiBC,EAAAA,GAAAA,GAAH,mLAOf,qBAAGC,MAAkBC,MAAM,MAC1B,qBAAGD,MAAkBC,MAAM,MAG3BC,EAAWH,EAAAA,GAAAA,GAAH,qKACD,qBAAGC,MAAkBC,MAAM,MAIzB,qBAAGD,MAAkBG,OAAOC,WAEtC,qBAAGJ,MAAkBK,QAAQC,WACtB,qBAAGN,MAAkBO,MAAMD,WAKjCE,EAAYT,EAAAA,GAAAA,IAAH,yJAKH,qBAAGC,MAAkBC,MAAM,MAExB,qBAAGD,MAAkBG,OAAOM,WAKrCC,EAAaX,EAAAA,GAAAA,EAAH,yGACX,qBAAGC,MAAkBC,MAAM,MACpB,qBAAGD,MAAkBC,MAAM,MAE/B,qBAAGD,MAAkBW,UAAUC,KAC7B,qBAAGZ,MAAkBa,YAAYC,YAGrCC,EAAYhB,EAAAA,GAAAA,EAAH,wCACV,qBAAGC,MAAkBC,MAAM,M,mBCpC1Be,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,SAACnB,EAAD,UACGmB,EAASC,KAAI,gBCXQC,EDWLC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,UAAhC,OACZ,UAACrB,EAAD,YACE,SAACM,EAAD,CACEgB,KCdgBL,EDcAG,ECbfH,EAAW,yCACkBA,GAClCM,GDYIC,IAAKL,EACLM,MAAO,IACPC,OAAQ,OAEV,SAAClB,EAAD,UAAaW,KACb,SAACN,EAAD,UACGQ,EAAS,qBAAiBA,GAAjB,8BATCH,S,oBEgBrB,EAvBkB,WAChB,IAAQ3B,GAAYoC,EAAAA,EAAAA,MAAZpC,QAER,GAAgCqC,EAAAA,EAAAA,UAAS,MAAzC,eAAOb,EAAP,KAAiBc,EAAjB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,WAArC,eAAO7C,EAAP,KAAe+C,EAAf,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRtC,EAAAA,EAAAA,IAAQF,GACLyC,MAAK,SAAAC,GACJJ,EAAYI,GACZH,EAAU,eAEXI,OAAM,kBAAMJ,EAAU,iBACxB,CAACvC,IAEW,YAAXR,GAA6B,SAACoD,EAAA,EAAD,IAClB,aAAXpD,GACK,SAAC,IAAD,0CACM,aAAXA,GAA6C,IAApBgC,EAASqB,QAC7B,SAAC,IAAD,0DACM,aAAXrD,GAA8B,SAAC+B,EAAD,CAAUC,SAAUA,SAAtD,I,oECzBWsB,E,MAAUxC,GAAAA,EAAH,8HACR,qBAAGC,MAAkBC,MAAM,MAC1B,qBAAGD,MAAkBC,MAAM,MAAM,qBAAGD,MAAkBC,MAAM,MAE1D,qBAAGD,MAAkBW,UAAU6B,KAC7B,qBAAGxC,MAAkBa,YAAYC,a","sources":["constants/api.js","api/api.js","components/MovieDetails/MovieCast/CastList/CastList.styled.js","components/MovieDetails/MovieCast/CastList/CastList.jsx","constants/ActorsPath.jsx","components/MovieDetails/MovieCast/MovieCast.jsx","components/Shared/Message.styled.js"],"sourcesContent":["export const API_BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'e915ca6542c1415913257f822128d2ab';\n","import axios from 'axios';\nimport { API_BASE_URL, API_KEY } from 'constants/api';\n\naxios.defaults.baseURL = API_BASE_URL;\n\nexport const getTrending = async () => {\n  const url = '/trending/movie/day';\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const queryData = await axios(url, { params });\n\n  if (queryData?.status !== 200) throw new Error();\n\n  return queryData.data.results;\n};\n\nexport const getMovies = async searchQuery => {\n  const url = '/search/movie';\n  const params = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const queryData = await axios(url, { params });\n\n  if (queryData?.status !== 200) throw new Error();\n\n  return queryData.data.results;\n};\n\nexport const getMovie = async movieID => {\n  const url = `/movie/${movieID}`;\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const queryData = await axios(url, { params });\n\n  if (queryData?.status !== 200) throw new Error();\n\n  return queryData.data;\n};\n\nexport const getCast = async movieID => {\n  const url = `/movie/${movieID}/credits`;\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const queryData = await axios(url, { params });\n\n  if (queryData?.status !== 200) throw new Error();\n\n  return queryData.data.cast;\n};\n\nexport const getReviews = async movieID => {\n  const url = `/movie/${movieID}/reviews`;\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const queryData = await axios(url, { params });\n\n  if (queryData?.status !== 200) throw new Error();\n\n  return queryData.data.results;\n};\n","import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(185px, 1fr));\n\n  list-style: none;\n\n  margin: ${({ theme }) => theme.space[0]};\n  padding: ${({ theme }) => theme.space[0]};\n`;\n\nexport const CastItem = styled.li`\n  padding-bottom: ${({ theme }) => theme.space[4]};\n\n  text-align: center;\n\n  background-color: ${({ theme }) => theme.colors.lightBG};\n\n  border: ${({ theme }) => theme.borders.generic};\n  border-radius: ${({ theme }) => theme.radii.generic};\n\n  overflow: hidden;\n`;\n\nexport const CastImage = styled.img`\n  display: block;\n\n  width: 100%;\n  height: auto;\n  margin-bottom: ${({ theme }) => theme.space[4]};\n\n  background-color: ${({ theme }) => theme.colors.whiteBG};\n\n  object-fit: cover;\n`;\n\nexport const ArtistName = styled.p`\n  margin: ${({ theme }) => theme.space[0]};\n  margin-bottom: ${({ theme }) => theme.space[3]};\n\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  font-weight: ${({ theme }) => theme.fontWeights.semiBold};\n`;\n\nexport const Character = styled.p`\n  margin: ${({ theme }) => theme.space[0]};\n`;\n","import PropTypes from 'prop-types';\nimport {\n  StyledCastList,\n  CastImage,\n  CastItem,\n  ArtistName,\n  Character,\n} from './CastList.styled';\n\nimport { ActorsPath } from 'constants/ActorsPath';\n\nexport const CastList = ({ castData }) => (\n  <StyledCastList>\n    {castData.map(({ cast_id, name, profile_path, character }) => (\n      <CastItem key={cast_id}>\n        <CastImage\n          src={ActorsPath(profile_path)}\n          alt={name}\n          width={230}\n          height={345}\n        />\n        <ArtistName>{name}</ArtistName>\n        <Character>\n          {character ? `Character: ${character}` : `Character not specified`}\n        </Character>\n      </CastItem>\n    ))}\n  </StyledCastList>\n);\n\nCastList.propTypes = {\n  castData: PropTypes.array.isRequired,\n};\n","import noImage from '../images/ActorsPhotoes.png';\n\nexport const ActorsPath = poster_path => {\n  return ( poster_path\n    ? `https://image.tmdb.org/t/p/w342${poster_path}`\n    : noImage\n);\n  };\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'api/api';\nimport { CastList } from './CastList/CastList';\nimport { Message } from 'components/Shared/Message.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieCast = () => {\n  const { movieID } = useParams();\n\n  const [castData, setCastData] = useState(null);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    getCast(movieID)\n      .then(result => {\n        setCastData(result);\n        setStatus('resolved');\n      })\n      .catch(() => setStatus('rejected'));\n  }, [movieID]);\n\n  if (status === 'pending') return <Loader />;\n  if (status === 'rejected')\n    return <Message>Ooops, something went wrong</Message>;\n  if (status === 'resolved' && castData.length === 0)\n    return <Message>There is no cast information for that movie</Message>;\n  if (status === 'resolved') return <CastList castData={castData} />;\n};\n\nexport default MovieCast;\n","import styled from 'styled-components';\n\nexport const Message = styled.p`\n  margin: ${({ theme }) => theme.space[0]};\n  padding: ${({ theme }) => theme.space[5]} ${({ theme }) => theme.space[0]};\n\n  font-size: ${({ theme }) => theme.fontSizes.l};\n  font-weight: ${({ theme }) => theme.fontWeights.semiBold};\n  text-align: center;\n`;\n"],"names":["API_KEY","axios","getTrending","params","api_key","queryData","status","Error","data","results","getMovies","searchQuery","query","getMovie","movieID","url","getCast","cast","getReviews","StyledCastList","styled","theme","space","CastItem","colors","lightBG","borders","generic","radii","CastImage","whiteBG","ArtistName","fontSizes","m","fontWeights","semiBold","Character","CastList","castData","map","poster_path","cast_id","name","profile_path","character","src","noImage","alt","width","height","useParams","useState","setCastData","setStatus","useEffect","then","result","catch","Loader","length","Message","l"],"sourceRoot":""}